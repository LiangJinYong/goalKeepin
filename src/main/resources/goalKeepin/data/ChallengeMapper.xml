<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="goalKeepin.data.ChallengeMapper">

	<resultMap type="BaseChallenge" id="BaseChallenge">
		<id property="baseNo" column="baseNo" />
		<result property="baseNmTransNo" column="baseNmTransNo" />
		<result property="baseNmEn" column="baseNmEn" />
		<result property="baseNmTc" column="baseNmTc" />
		<result property="baseNmSc" column="baseNmSc" />
		<result property="baseThumbnailUrl" column="baseThumbnailUrl" />
		<result property="baseHabitTypeCd" column="baseHabitTypeCd" />
		<result property="baseAuthDateCd" column="baseAuthDateCd" />
		<result property="baseAuthFrequency" column="baseAuthFrequency" />
		<result property="baseAuthFromTime" column="baseAuthFromTime" />
		<result property="baseAuthToTime" column="baseAuthToTime" />
		<result property="baseAuthNumDaily" column="baseAuthNumDaily" />
		<result property="baseAuthMethodCd" column="baseAuthMethodCd" />
		<result property="baseAuthIsOpen" column="baseAuthIsOpen" />
		<result property="baseAuthInterval" column="baseAuthInterval" />
		<result property="baseAuthIsAlbum" column="baseAuthIsAlbum" />
		<result property="baseAuthDescTransNo" column="baseAuthDescTransNo" />
		<result property="baseAuthDescEn" column="baseAuthDescEn" />
		<result property="baseAuthDescTc" column="baseAuthDescTc" />
		<result property="baseAuthDescSc" column="baseAuthDescSc" />
		<result property="baseDetailTransNo" column="baseDetailTransNo" />
		<result property="baseDetailEn" column="baseDetailEn" />
		<result property="baseDetailTc" column="baseDetailTc" />
		<result property="baseDetailSc" column="baseDetailSc" />
		<result property="baseRegDate" column="baseRegDate" />
		<result property="searchKeyword" column="searchKeyword" />
	</resultMap>
	
	<resultMap type="OperatedChallenge" id="OperatedChallenge">
		<id property="operatedChallengeNo" column="operatedChallengeNo" />
		<result property="baseChallengeNo" column="baseChallengeNo" />
		<result property="gradeCd" column="gradeCd" />
		<result property="minFee" column="minFee" />
		<result property="maxFee" column="maxFee" />
		<result property="startDate" column="startDate" />
		<result property="endDate" column="endDate" />
		<result property="statusCd" column="statusCd" />
		<result property="entryNum" column="entryNum" />
		<result property="totalFee" column="totalFee" />
		<result property="regDate" column="regDate" />
		<association property="category" resultMap="goalKeepin.data.CategoryMapper.Category"></association>
		<association property="baseChallenge" resultMap="BaseChallenge"></association>
	</resultMap>
	
	<resultMap type="User" id="User">
		<id property="userNo" column="userNo" />
		<result property="userId" column="userId" />
		<result property="loginTypeCd" column="loginTypeCd" />
		<result property="nickName" column="nickName" />
		<result property="nationalityCd" column="nationalityCd" />
		<result property="userAccount" column="userAccount" />
		<result property="userRegDate" column="userRegDate" />
		<collection property="challenges" resultMap="OperatedChallenge"></collection>
	</resultMap>
	
	<resultMap type="ParticipantEntry" id="ParticipantEntry">
		<id property="entryNo" column="entryNo" />
		<result property="entryFee" column="entryFee" />
		<result property="entryResult" column="entryResult" />
		<result property="entryRegDate" column="entryRegDate" />
		<result property="entryYear" column="entryYear" />
		<result property="entryQuarter" column="entryQuarter" />
		<result property="rewardAmount" column="rewardAmount" />
		
		<association property="participant" resultMap="User"></association>
		<association property="operatedChallenge" resultMap="OperatedChallenge"></association>
	</resultMap>
	
	<resultMap type="Review" id="Review">
		<id property="reviewNo" column="reviewNo" />
		<result property="reviewContent" column="reviewContent" />
		<result property="reviewRegDate" column="reviewRegDate" />
		<association property="user" resultMap="User"></association>
		<association property="operatedChallenge" resultMap="OperatedChallenge"></association>
	</resultMap>
	
	<select id="selectHomepageHeaderInfo" resultType="hashmap">
    	/* selectHomepageHeaderInfo */
		SELECT IFNULL(SUM(challenge_entry_num), 0) totalParicipantCount, IFNULL(SUM(challenge_total_fee), 0) totalFeeAmount
		FROM OPERATED_CHALLENGE_TB
	</select>
	
	<select id="selectUnprocessedApprovalCount" resultType="int">
    	/* selectUnprocessedApprovalCount */
		SELECT COUNT(*) FROM CHALLENGE_AUTH_TB WHERE auth_st_cd = 'AS01'
	</select>
	
	<select id="selectUnprocessedInquiryCount" resultType="int">
    	/* selectUnprocessedInquiryCount */
		SELECT COUNT(*) FROM INQUIRY_TB WHERE INQUIRY_ST_CD = 'IN01'
	</select>
	
	<select id="selectUnprocessedReportCount" resultType="int">
    	/* selectUnprocessedReportCount */
		SELECT COUNT(*) FROM REPORT_TB WHERE PROCESS_STATUS = 0
	</select>
	
	<select id="getTotalBaseChallengeNum" resultType="int">
    	/* getTotalBaseChallengeNum */
    	SELECT COUNT(*) totalBaseChallengeNum
		<include refid="baseChallenge" />
	</select>

    <select id="selectBaseChallengeList" parameterType="map" resultType="hashmap">
    	/* selectBaseChallengeList */
        SELECT bct.BASE_NO baseNo
        	, tt.TRANS_EN name
			, (SELECT COUNT(*) FROM OPERATED_CHALLENGE_TB oct WHERE oct.CHALLENGE_ST_CD = 'CH01' AND oct.CHALLENGE_BASE_NO = bct.BASE_NO) recruiting
		    , (SELECT COUNT(*) FROM OPERATED_CHALLENGE_TB oct WHERE oct.CHALLENGE_ST_CD = 'CH02' AND oct.CHALLENGE_BASE_NO = bct.BASE_NO) ongoing
		    , (SELECT COUNT(*) FROM OPERATED_CHALLENGE_TB oct WHERE oct.CHALLENGE_ST_CD = 'CH03' AND oct.CHALLENGE_BASE_NO = bct.BASE_NO) expired
		<include refid="baseChallenge" />
		ORDER BY 
		<if test="sortField != null">
			${sortField} ${sortOrder},
		</if>
		base_reg_dt DESC
		LIMIT ${startIndex}, ${pageSize}
    </select>
    
    <sql id="baseChallenge">
    	FROM BASE_CHALLENGE_TB bct
		INNER JOIN TRANSLATION_TB tt on bct.base_nm_t_no  = tt.TRANS_NO
    </sql>

	<insert id="insertOrUpdateBaseChallenge" parameterType="BaseChallenge">
		/* insertOrUpdateBaseChallenge */
		INSERT INTO BASE_CHALLENGE_TB
		(base_no, base_nm_t_no, base_thumbnail_url, base_habit_tp_cd, base_auth_date_cd, base_auth_freq, base_auth_from_time, base_auth_to_time, base_auth_num, base_auth_method_cd, base_auth_is_open, base_auth_interval, base_auth_is_album, base_auth_desc_t_no, base_detail_t_no, search_keyword)
		VALUES
		(#{baseNo}, #{baseNmTransNo}, #{baseThumbnailUrl}, #{baseHabitTypeCd}, #{baseAuthDateCd}, #{baseAuthFrequency}, #{baseAuthFromTime}, #{baseAuthToTime}, #{baseAuthNumDaily}, #{baseAuthMethodCd}, #{baseAuthIsOpen}, #{baseAuthInterval}, #{baseAuthIsAlbum}, #{baseAuthDescTransNo}, #{baseDetailTransNo}, #{searchKeyword})
		ON DUPLICATE KEY UPDATE
		<if test="baseThumbnailUrl != null">
			base_thumbnail_url = #{baseThumbnailUrl}, 
		</if>
		base_habit_tp_cd = #{baseHabitTypeCd}, base_auth_date_cd = #{baseAuthDateCd}, base_auth_freq = #{baseAuthFrequency}, base_auth_from_time = #{baseAuthFromTime}, base_auth_to_time = #{baseAuthToTime}, base_auth_num = #{baseAuthNumDaily}, base_auth_method_cd = #{baseAuthMethodCd}, base_auth_is_open = #{baseAuthIsOpen}, base_auth_interval = #{baseAuthInterval}, base_auth_is_album = #{baseAuthIsAlbum}, search_keyword = #{searchKeyword}  
	</insert>
	
	<insert id="insertOrUpdateBaseNmTrans" parameterType="BaseChallenge"
		useGeneratedKeys="true" keyColumn="TRANS_NO" keyProperty="baseNmTransNo">
		/* insertOrUpdateBaseNmTrans */
		INSERT INTO TRANSLATION_TB 
		(TRANS_NO, TRANS_EN, TRANS_S_CN, TRANS_T_CN)
		VALUES 
		(#{baseNmTransNo}, #{baseNmEn}, #{baseNmSc}, #{baseNmTc})
		ON DUPLICATE KEY UPDATE trans_en = #{baseNmEn}, trans_s_cn = #{baseNmSc}, trans_t_cn = #{baseNmTc}
	</insert>
	
	<insert id="insertOrUpdateBaseAuthDescTrans" parameterType="BaseChallenge"
		useGeneratedKeys="true" keyColumn="TRANS_NO" keyProperty="baseAuthDescTransNo">
		/* insertOrUpdateBaseAuthDescTrans */
		INSERT INTO TRANSLATION_TB 
		(TRANS_NO, TRANS_EN, TRANS_S_CN, TRANS_T_CN)
		VALUES (#{baseAuthDescTransNo}, #{baseAuthDescEn}, #{baseAuthDescSc}, #{baseAuthDescTc})
		ON DUPLICATE KEY UPDATE trans_en = #{baseAuthDescEn}, trans_s_cn = #{baseAuthDescSc}, trans_t_cn = #{baseAuthDescTc}
	</insert>
	
	<insert id="insertOrUpdateBaseDetailTrans" parameterType="BaseChallenge"
		useGeneratedKeys="true" keyColumn="TRANS_NO" keyProperty="baseDetailTransNo">
		/* insertOrUpdateBaseDetailTrans */
		INSERT INTO TRANSLATION_TB 
		(TRANS_NO, TRANS_EN, TRANS_S_CN, TRANS_T_CN)
		VALUES (#{baseDetailTransNo}, #{baseDetailEn}, #{baseDetailSc}, #{baseDetailTc})
		ON DUPLICATE KEY UPDATE trans_en = #{baseDetailEn}, trans_s_cn = #{baseDetailSc}, trans_t_cn = #{baseDetailTc}
	</insert>
	
	<select id="selectModifiable" parameterType="long" resultType="int">
		/* selectModifiable */
		SELECT COUNT(*) = 0 FROM OPERATED_CHALLENGE_TB WHERE challenge_base_no = #{baseNo}
	</select>
	
	<select id="selectBaseChallengeByNo" parameterType="long" resultType="BaseChallenge">
		/* selectBaseChallengeByNo */
		SELECT bct.base_no baseNo
		, bct.base_nm_t_no baseNmTransNo
		, (SELECT trans_en FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_nm_t_no) baseNmEn
		, (SELECT trans_t_cn FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_nm_t_no) baseNmTc
		, (SELECT trans_s_cn FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_nm_t_no) baseNmSc
		, bct.base_thumbnail_url baseThumbnailUrl
		, bct.base_habit_tp_cd baseHabitTypeCd
		, bct.base_auth_date_cd baseAuthDateCd
		, bct.base_auth_freq baseAuthFrequency
		, bct.base_auth_from_time baseAuthFromTime
		, bct.base_auth_to_time baseAuthToTime
		, bct.base_auth_num baseAuthNumDaily
		, bct.base_auth_method_cd baseAuthMethodCd
		, bct.base_auth_is_open baseAuthIsOpen
		, bct.base_auth_interval baseAuthInterval
		, bct.base_auth_is_album baseAuthIsAlbum
		, bct.base_auth_desc_t_no baseAuthDescTransNo
		, (SELECT trans_en FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_auth_desc_t_no) baseAuthDescEn
		, (SELECT trans_t_cn FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_auth_desc_t_no) baseAuthDescTc
		, (SELECT trans_s_cn FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_auth_desc_t_no) baseAuthDescSc
		, bct.base_detail_t_no baseDetailTransNo
		, (SELECT trans_en FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_detail_t_no) baseDetailEn
		, (SELECT trans_t_cn FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_detail_t_no) baseDetailTc
		, (SELECT trans_s_cn FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_detail_t_no) baseDetailSc
		, bct.base_reg_dt baseRegDate
		, bct.search_keyword searchKeyword
		FROM BASE_CHALLENGE_TB bct
		WHERE base_no = #{baseNo}
	</select>
	
	<select id="selectCategoryList" resultType="hashmap">
		/* selectCategoryList */
		SELECT ct.category_no categoryNo, tt.trans_en categoryContent
		FROM CATEGORY_TB ct
		INNER JOIN TRANSLATION_TB tt
		ON ct.category_nm_t_no = tt.trans_no
		ORDER BY category_no DESC
	</select>
	
	<insert id="insertOperatedChallengeInfo" parameterType="OperatedChallenge">
		/* insertOperatedChallengeInfo */
		INSERT INTO OPERATED_CHALLENGE_TB 
		(challenge_base_no, challenge_category_no, challenge_grade_cd, challenge_min_fee, challenge_max_fee, challenge_start_dt, challenge_end_dt, challenge_st_cd, challenge_max_result)
		VALUES
		(#{baseChallengeNo}, #{categoryNo}, #{gradeCd}, #{minFee}, #{maxFee}, #{startDate}, #{endDate}, 'CH01', #{maxResult})
	</insert>
	
	<sql id="operatedChallenge">
		FROM BASE_CHALLENGE_TB bct
		INNER JOIN OPERATED_CHALLENGE_TB oct ON bct.base_no = oct.challenge_base_no
		WHERE bct.base_no = #{baseNo}
	</sql>
	
	<select id="getOperatedChallengeCountByBase" parameterType="long" resultType="int">
		/* getOperatedChallengeCountByBase */
		SELECT COUNT(*) operatedChallengeCount
		<include refid="operatedChallenge" />
	</select>
	
	<select id="selectOperatedChallengeListByBaseNo" parameterType="map" resultType="hashmap">
		/* selectOperatedChallengeListByBaseNo */
		SELECT oct.challenge_no operatedChallengeNo, oct.challenge_start_dt startDate, oct.challenge_end_dt endDate, oct.challenge_entry_num entryNum, oct.challenge_st_cd statusCd
		<include refid="operatedChallenge" />
		ORDER BY
		<if test="sortField != null">
			${sortField} ${sortOrder},
		</if>
		oct.challenge_no DESC
		LIMIT ${startIndex}, ${pageSize}
	</select>
	
	<select id="selectBaseChallengeNmEn" parameterType="long" resultType="string">
		/* selectBaseChallengeNmEn */
		SELECT tt.trans_en
		FROM BASE_CHALLENGE_TB bct
		INNER JOIN TRANSLATION_TB tt ON bct.base_nm_t_no = tt.trans_no
		WHERE bct.base_no = #{baseNo}
	</select>
	
	<select id="selectOperatedChallengeByNo" parameterType="long" resultMap="OperatedChallenge">
		/* selectOperatedChallengeByNo */
		SELECT bct.base_no baseNo
		, bct.base_nm_t_no baseNmTransNo
		, (SELECT trans_en FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_nm_t_no) baseNmEn
		, (SELECT trans_t_cn FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_nm_t_no) baseNmTc
		, (SELECT trans_s_cn FROM TRANSLATION_TB tt WHERE tt.TRANS_NO = bct.base_nm_t_no) baseNmSc
		, bct.base_thumbnail_url baseThumbnailUrl
		, bct.base_habit_tp_cd baseHabitTypeCd
		, bct.base_auth_date_cd baseAuthDateCd
		, bct.base_auth_freq baseAuthFrequency
		, bct.base_auth_from_time baseAuthFromTime
		, bct.base_auth_to_time baseAuthToTime
		, bct.base_auth_num baseAuthNumDaily
		, bct.base_auth_method_cd baseAuthMethodCd
		, bct.base_auth_is_open baseAuthIsOpen
		, bct.base_auth_interval baseAuthInterval
		, bct.base_auth_is_album baseAuthIsAlbum
		, bct.base_auth_desc_t_no baseAuthDescTransNo
		, (SELECT trans_en FROM TRANSLATION_TB tt WHERE tt.trans_no = bct.base_auth_desc_t_no) baseAuthDescEn
		, (SELECT trans_t_cn FROM TRANSLATION_TB tt WHERE tt.trans_no = bct.base_auth_desc_t_no) baseAuthDescTc
		, (SELECT trans_s_cn FROM TRANSLATION_TB tt WHERE tt.trans_no = bct.base_auth_desc_t_no) baseAuthDescSc
		, bct.base_detail_t_no baseDetailTransNo
		, (SELECT trans_en FROM TRANSLATION_TB tt WHERE tt.trans_no = bct.base_detail_t_no) baseDetailEn
		, (SELECT trans_t_cn FROM TRANSLATION_TB tt WHERE tt.trans_no = bct.base_detail_t_no) baseDetailTc
		, (SELECT trans_s_cn FROM TRANSLATION_TB tt WHERE tt.trans_no = bct.base_detail_t_no) baseDetailSc
		, bct.base_reg_dt baseRegDate
		, bct.search_keyword searchKeyword
        , oct.challenge_no operatedChallengeNo
        , oct.challenge_category_no categoryNo
        , (SELECT trans_en FROM TRANSLATION_TB tt INNER JOIN CATEGORY_TB ct ON tt.trans_no = ct.category_nm_t_no WHERE ct.category_no = oct.challenge_category_no) categoryNmEn
        , oct.challenge_grade_cd gradeCd
        , oct.challenge_min_fee minFee
        , oct.challenge_max_fee maxFee
        , oct.challenge_start_dt startDate
        , oct.challenge_end_dt endDate
        , oct.challenge_st_cd statusCd
        , oct.challenge_reg_dt regDate
		FROM BASE_CHALLENGE_TB bct
        INNER JOIN OPERATED_CHALLENGE_TB oct ON bct.base_no = oct.challenge_base_no
        WHERE oct.CHALLENGE_NO = #{operatedNo}
	</select>
	
	<select id="getChallengeProofCount" parameterType="long" resultType="int">
		/* getChallengeProofCount */
		SELECT COUNT(*) 
		FROM CHALLENGE_AUTH_TB 
		WHERE auth_c_no = #{operatedNo}
	</select>
	
	<select id="getPaticipantCountByChallenge" parameterType="long" resultType="int">
		/* getPaticipantCountByChallenge */
		SELECT COUNT(*) 
		FROM CHALLENGE_ENTRY_TB 
		WHERE entry_challenge_no = #{operatedNo}
	</select>
	
	<select id="selectParticipantEntryList" parameterType="map" resultMap="ParticipantEntry">
		/* selectParticipantEntryList */
		SELECT cet.entry_no entryNo, ut.user_id userId, cet.entry_fee entryFee, cet.entry_reg_dt entryRegDate, cet.entry_result entryResult
        FROM CHALLENGE_ENTRY_TB cet
        INNER JOIN USER_TB ut ON cet.entry_user_no = ut.user_no
        WHERE cet.entry_challenge_no = #{operatedNo}
        ORDER BY
        <if test="sortField != null">
			${sortField} ${sortOrder},
		</if>
        cet.entry_reg_dt DESC
        LIMIT ${startIndex}, ${pageSize}
	</select>

	<select id="selectEntryInfoByParticipant" parameterType="long" resultMap="ParticipantEntry">
		/* selectEntryInfoByParticipant */
		SELECT tt.trans_en baseNmEn, ut.user_id userId, cet.entry_fee entryFee, cet.entry_result entryResult, cet.entry_reg_dt entryRegDate, bct.base_auth_method_cd baseAuthMethodCd
			, CASE WHEN entry_result &lt; 85 THEN 0 WHEN entry_result &gt;= 85 AND entry_result &lt; 100 THEN entry_fee ELSE  entry_fee * 1.1 END rewardAmount
        FROM CHALLENGE_ENTRY_TB cet
        INNER JOIN USER_TB ut ON cet.entry_user_no = ut.user_no
		INNER JOIN OPERATED_CHALLENGE_TB oct ON cet.entry_challenge_no = oct.challenge_no
        INNER JOIN BASE_CHALLENGE_TB bct ON oct.challenge_base_no = bct.base_no
        INNER JOIN TRANSLATION_TB tt ON bct.base_nm_t_no = tt.trans_no
        WHERE cet.entry_no = #{entryNo}
	</select>
	
	<select id="selectOperatedChallengeInfo" parameterType="long" resultMap="OperatedChallenge">
		/* selectOperatedChallengeInfo */
		SELECT tt.trans_en baseNmEn, oct.challenge_reg_dt regDate, oct.challenge_entry_num entryNum, oct.challenge_total_fee totalFee, bct.base_auth_method_cd baseAuthMethodCd
		FROM OPERATED_CHALLENGE_TB oct INNER JOIN BASE_CHALLENGE_TB bct ON oct.challenge_base_no = bct.base_no
		INNER JOIN TRANSLATION_TB tt ON bct.base_nm_t_no = tt.trans_no
		WHERE oct.challenge_no = #{operatedNo}	
	</select>
	
	<select id="getReviewCountByChallenge" parameterType="long" resultType="int">
		/* getReviewCountByChallenge */
		SELECT COUNT(*)
		FROM CHALLENGE_REVIEW_TB
		WHERE review_c_no = #{operatedNo}
	</select>
	
	<select id="selectReviewListByChallenge" parameterType="long" resultMap="Review">
		/* selectReviewListByChallenge */
		SELECT crt.review_no reviewNo, ut.user_id userId, ut.user_nickname nickName, crt.review_txt reviewContent, crt.review_reg_dt reviewRegDate
		FROM CHALLENGE_REVIEW_TB crt INNER JOIN USER_TB ut ON crt.review_user_no = ut.user_no
		WHERE crt.review_c_no = #{operatedNo}
		ORDER BY 
		<if test="sortField != null">
			${sortField} ${sortOrder},
		</if>
		crt.review_no DESC
		LIMIT ${startIndex}, ${pageSize}
	</select>
	
	<select id="getAllOperatedChallengeCount" parameterType="map" resultType="int">
		/* getAllOperatedChallengeCount */
		 SELECT COUNT(*) 
		 FROM OPERATED_CHALLENGE_TB oct 
		 INNER JOIN BASE_CHALLENGE_TB bct ON oct.challenge_base_no = bct.base_no
		 WHERE oct.challenge_st_cd = #{statusCd}
		 <if test="habitTypeCd != 'HT00'">
		 	AND LOCATE(#{habitTypeCd}, bct.base_habit_tp_cd) > 0
		 </if>
	</select>
	
	<select id="selectAllOperatedChallengeList" parameterType="map" resultMap="OperatedChallenge">
		/* selectAllOperatedChallengeList */
		SELECT oct.challenge_no operatedChallengeNo, tt.trans_en baseNmEn, oct.challenge_start_dt startDate, oct.challenge_end_dt endDate, oct.challenge_entry_num entryNum
		FROM BASE_CHALLENGE_TB bct
		INNER JOIN OPERATED_CHALLENGE_TB oct ON bct.base_no = oct.challenge_base_no
        INNER JOIN TRANSLATION_TB tt on tt.trans_no = bct.base_nm_t_no
		WHERE oct.challenge_st_cd = #{statusCd}
		<if test="habitTypeCd != 'HT00'">
			AND LOCATE(#{habitTypeCd}, bct.base_habit_tp_cd) > 0
		</if>
		ORDER BY
		<if test="sortField != null">
			${sortField} ${sortOrder},
		</if>
		bct.base_no DESC, oct.challenge_no DESC
		LIMIT ${startIndex}, ${pageSize}
	</select>
	
	<select id="selectParticipantProofList" parameterType="long" resultType="hashmap">
		/* selectParticipantProofList */
		SELECT cat.auth_reg_dt proofDate, cat.auth_url proofUrl
		FROM CHALLENGE_AUTH_TB cat
		INNER JOIN CHALLENGE_ENTRY_TB cet ON cat.auth_c_no = cet.entry_challenge_no AND cat.auth_user_no = cet.entry_user_no
		WHERE cet.entry_no = #{entryNo}
		ORDER BY cat.auth_reg_dt DESC
	</select>
	
	<select id="selectChallengeProofList" parameterType="long" resultType="hashmap">
		/* selectChallengeProofList */
		SELECT cat.auth_reg_dt proofDate, cat.auth_url proofUrl, ut.USER_ID userId
		FROM CHALLENGE_AUTH_TB cat INNER JOIN OPERATED_CHALLENGE_TB oct ON cat.auth_c_no = oct.challenge_no
		INNER JOIN USER_TB ut ON cat.auth_user_no = ut.user_no
		WHERE oct.challenge_no = #{operatedNo}
	</select>
</mapper>